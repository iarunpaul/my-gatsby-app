# Fixed GitHub Actions Workflow - Correct Step Ordering
name: Deploy LinkedIn MCP Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and Push Docker Image
      run: |
        # Set variables
        ACR_NAME="${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}"
        IMAGE_TAG="${{ github.sha }}"
        IMAGE_NAME="linkedin-mcp-server"
        FULL_IMAGE_NAME="$ACR_NAME.azurecr.io/$IMAGE_NAME"
        
        echo "üê≥ Building image: $FULL_IMAGE_NAME:$IMAGE_TAG"
        
        # Login to ACR using Azure CLI
        az acr login --name $ACR_NAME
        
        # Build and push image with SHA tag
        docker build -t $FULL_IMAGE_NAME:$IMAGE_TAG ./mcp-servers/linkedin-real/
        docker push $FULL_IMAGE_NAME:$IMAGE_TAG
        
        # Also tag and push as latest
        docker tag $FULL_IMAGE_NAME:$IMAGE_TAG $FULL_IMAGE_NAME:latest
        docker push $FULL_IMAGE_NAME:latest
        
        echo "‚úÖ Image pushed: $FULL_IMAGE_NAME:$IMAGE_TAG"
    
    - name: Setup Azure Resources
      run: |
        # Set variables
        RESOURCE_GROUP="Pollys"
        LOCATION="East US"
        ENVIRONMENT_NAME="cae-linkedin-mcp"
        
        echo "üèóÔ∏è Setting up Azure resources..."
        
        # Create resource group if it doesn't exist
        az group create --name $RESOURCE_GROUP --location "$LOCATION" || true
        
        # Create Container Apps environment if it doesn't exist
        az containerapp env create \
          --name $ENVIRONMENT_NAME \
          --resource-group $RESOURCE_GROUP \
          --location "$LOCATION" || true
        
        echo "‚úÖ Azure resources ready"
    
    - name: Create Container App with System Identity (No Image Yet)
      run: |
        # Set variables
        RESOURCE_GROUP="Pollys"
        ENVIRONMENT_NAME="cae-linkedin-mcp"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        
        echo "üöÄ Creating Container App with system identity (placeholder image)..."
        
        # Check if container app exists
        if az containerapp show --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
          echo "‚úÖ Container App already exists"
        else
          echo "üÜï Creating new container app with system identity..."
          
          # Create container app with system identity using a placeholder image
          # We'll update it with the real image after ACR access is configured
          az containerapp create \
            --name $CONTAINER_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --environment $ENVIRONMENT_NAME \
            --image mcr.microsoft.com/azuredocs/containerapps-helloworld:latest \
            --system-assigned \
            --env-vars \
              LINKEDIN_EMAIL="${{ secrets.LINKEDIN_EMAIL }}" \
              LINKEDIN_PASSWORD="${{ secrets.LINKEDIN_PASSWORD }}" \
              ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
              MCP_SERVER_PORT=8001 \
              DEBUG=false \
              GATSBY_LINKEDIN_USERNAME="${{ secrets.GATSBY_LINKEDIN_USERNAME }}" \
            --target-port 80 \
            --ingress external \
            --min-replicas 0 \
            --max-replicas 3 \
            --cpu 1.0 \
            --memory 2Gi
        fi
        
        echo "‚úÖ Container app created with system identity"
    
    - name: Configure ACR Access with System Identity
      run: |
        # Set variables
        ACR_NAME="${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}"
        RESOURCE_GROUP="Pollys"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        
        echo "üîê Configuring ACR access with system-assigned managed identity..."
        
        # Ensure system-assigned identity is enabled
        az containerapp identity assign \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --system-assigned || true
        
        # Wait a moment for identity to be fully provisioned
        echo "‚è≥ Waiting for identity provisioning..."
        sleep 15
        
        # Get the system-assigned managed identity principal ID
        PRINCIPAL_ID=$(az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query identity.principalId \
          --output tsv)
        
        if [ -z "$PRINCIPAL_ID" ] || [ "$PRINCIPAL_ID" = "null" ]; then
          echo "‚ùå Failed to get system identity principal ID"
          exit 1
        fi
        
        echo "‚úÖ System Identity Principal ID: $PRINCIPAL_ID"
        
        # Grant AcrPull role to the system-assigned managed identity
        ACR_SCOPE=$(az acr show --name $ACR_NAME --query id --output tsv)
        
        echo "üîë Granting AcrPull role to system identity..."
        az role assignment create \
          --assignee $PRINCIPAL_ID \
          --role "AcrPull" \
          --scope $ACR_SCOPE || echo "Role assignment may already exist"
        
        # Wait for role assignment to propagate
        echo "‚è≥ Waiting for role assignment to propagate..."
        sleep 10
        
        # Link the ACR to the Container App using system identity
        echo "üîó Linking ACR to Container App..."
        az containerapp registry set \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --server $ACR_NAME.azurecr.io \
          --identity system
        
        echo "‚úÖ ACR access configured successfully"
        
        # Verify the configuration
        echo "üß™ Verifying ACR configuration..."
        az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.configuration.registries \
          --output table
    
    - name: Update Container App with Real Image
      run: |
        # Set variables
        ACR_NAME="${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}"
        IMAGE_TAG="${{ github.sha }}"
        IMAGE_NAME="linkedin-mcp-server"
        FULL_IMAGE_NAME="$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG"
        RESOURCE_GROUP="Pollys"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        
        echo "üîÑ Updating Container App with real image..."
        echo "üì¶ Using image: $FULL_IMAGE_NAME"
        
        # Update container app with the real image (now that ACR access is configured)
        az containerapp update \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --image $FULL_IMAGE_NAME \
          --set-env-vars \
            LINKEDIN_EMAIL="${{ secrets.LINKEDIN_EMAIL }}" \
            LINKEDIN_PASSWORD="${{ secrets.LINKEDIN_PASSWORD }}" \
            ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
            MCP_SERVER_PORT=8001 \
            DEBUG=false \
            GATSBY_LINKEDIN_USERNAME="${{ secrets.GATSBY_LINKEDIN_USERNAME }}" \
          --target-port 8001
        
        echo "‚úÖ Container app updated with real image successfully"
    
    - name: Verify Deployment and Get URL
      run: |
        # Set variables
        RESOURCE_GROUP="Pollys"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        
        echo "üß™ Verifying deployment..."
        
        # Get the container app URL
        APP_URL=$(az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        if [ -n "$APP_URL" ]; then
          echo "‚úÖ Container App deployed successfully!"
          echo "üåê App URL: https://$APP_URL"
          echo "üîç Health Check: https://$APP_URL/health"
          echo "üìä MCP Status: https://$APP_URL/api/mcp/status"
          echo "üìã LinkedIn Summary: https://$APP_URL/api/linkedin/summary"
          
          # Wait for the app to start
          echo "‚è≥ Waiting for app to start (60 seconds)..."
          sleep 60
          
          # Test health endpoint with retries
          echo "ü©∫ Testing health endpoint..."
          for i in {1..5}; do
            if curl -f -s "https://$APP_URL/health" >/dev/null; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚è≥ Attempt $i/5 - waiting 15 seconds..."
              sleep 15
            fi
          done
          
          # Test MCP status
          echo "üîç Testing MCP status..."
          if curl -f -s "https://$APP_URL/api/mcp/status" >/dev/null; then
            echo "‚úÖ MCP status endpoint working!"
          else
            echo "‚ö†Ô∏è MCP status check failed - checking logs..."
            az containerapp logs show --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP --tail 20 || true
          fi
          
        else
          echo "‚ùå Failed to get container app URL"
          exit 1
        fi
    
    - name: Display Summary
      run: |
        # Set variables
        RESOURCE_GROUP="Pollys"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        ACR_NAME="${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}"
        
        echo ""
        echo "üéâ Deployment Summary"
        echo "===================="
        
        # Get app details
        APP_URL=$(az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        PRINCIPAL_ID=$(az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query identity.principalId \
          --output tsv)
        
        echo "üì¶ Container App: $CONTAINER_APP_NAME"
        echo "üè† Resource Group: $RESOURCE_GROUP"
        echo "üê≥ Registry: $ACR_NAME.azurecr.io"
        echo "üÜî System Identity: $PRINCIPAL_ID"
        echo "üåê Public URL: https://$APP_URL"
        echo ""
        echo "üîó API Endpoints:"
        echo "  Health: https://$APP_URL/health"
        echo "  MCP Status: https://$APP_URL/api/mcp/status"
        echo "  LinkedIn Summary: https://$APP_URL/api/linkedin/summary"
        echo ""
        echo "üìã For Gatsby Integration:"
        echo "  Add to your GitHub secrets:"
        echo "  GATSBY_MCP_SERVER_URL=https://$APP_URL"
        echo ""
        echo "‚úÖ LinkedIn MCP Server deployed successfully with system-assigned identity!"

