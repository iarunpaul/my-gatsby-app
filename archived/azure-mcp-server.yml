# Robust GitHub Actions Workflow - Handle Environment Provisioning Issues
name: Deploy LinkedIn MCP Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and Push Docker Image
      run: |
        # Set variables
        ACR_NAME="${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}"
        IMAGE_TAG="${{ github.sha }}"
        IMAGE_NAME="linkedin-mcp-server"
        FULL_IMAGE_NAME="$ACR_NAME.azurecr.io/$IMAGE_NAME"
        
        echo "üê≥ Building image: $FULL_IMAGE_NAME:$IMAGE_TAG"
        
        # Login to ACR using Azure CLI
        az acr login --name $ACR_NAME
        
        # Build and push image with SHA tag
        docker build -t $FULL_IMAGE_NAME:$IMAGE_TAG ./mcp-servers/linkedin-real/
        docker push $FULL_IMAGE_NAME:$IMAGE_TAG
        
        # Also tag and push as latest
        docker tag $FULL_IMAGE_NAME:$IMAGE_TAG $FULL_IMAGE_NAME:latest
        docker push $FULL_IMAGE_NAME:latest
        
        echo "‚úÖ Image pushed: $FULL_IMAGE_NAME:$IMAGE_TAG"
    
    - name: Clean Up Previous Failed Resources
      run: |
        # Set variables
        RESOURCE_GROUP="Pollys"
        ENVIRONMENT_NAME="cae-linkedin-mcp"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        
        echo "üßπ Cleaning up any failed resources..."
        
        # Delete failed container app if it exists
        if az containerapp show --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
          PROVISIONING_STATE=$(az containerapp show --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP --query properties.provisioningState --output tsv)
          if [ "$PROVISIONING_STATE" = "Failed" ]; then
            echo "üóëÔ∏è Deleting failed container app..."
            az containerapp delete --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP --yes || true
          fi
        fi
        
        # Delete failed environment if it exists
        if az containerapp env show --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
          ENV_PROVISIONING_STATE=$(az containerapp env show --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP --query properties.provisioningState --output tsv)
          if [ "$ENV_PROVISIONING_STATE" = "Failed" ]; then
            echo "üóëÔ∏è Deleting failed environment..."
            az containerapp env delete --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP --yes || true
            # Wait for deletion to complete
            sleep 30
          fi
        fi
        
        echo "‚úÖ Cleanup completed"
    
    - name: Setup Azure Resources with Retry Logic
      run: |
        # Set variables
        RESOURCE_GROUP="Pollys"
        LOCATION="Central India"
        ENVIRONMENT_NAME="cae-linkedin-mcp"
        
        echo "üèóÔ∏è Setting up Azure resources with retry logic..."
        
        # Create resource group if it doesn't exist
        az group create --name $RESOURCE_GROUP --location "$LOCATION" || true
        
        # Function to create Container Apps environment with retries
        create_environment() {
          local attempt=1
          local max_attempts=3
          
          while [ $attempt -le $max_attempts ]; do
            echo "üîÑ Attempt $attempt/$max_attempts: Creating Container Apps environment..."
            
            if az containerapp env create \
              --name $ENVIRONMENT_NAME \
              --resource-group $RESOURCE_GROUP \
              --location "$LOCATION" \
              --logs-destination none; then
              
              echo "‚úÖ Container Apps environment created successfully"
              return 0
            else
              echo "‚ùå Attempt $attempt failed"
              if [ $attempt -lt $max_attempts ]; then
                echo "‚è≥ Waiting 60 seconds before retry..."
                sleep 60
                
                # Clean up failed attempt
                az containerapp env delete --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP --yes || true
                sleep 30
              fi
              attempt=$((attempt + 1))
            fi
          done
          
          echo "‚ùå Failed to create environment after $max_attempts attempts"
          return 1
        }
        
        # Check if environment exists and is healthy
        if az containerapp env show --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
          ENV_STATE=$(az containerapp env show --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP --query properties.provisioningState --output tsv)
          if [ "$ENV_STATE" = "Succeeded" ]; then
            echo "‚úÖ Container Apps environment already exists and is healthy"
          else
            echo "‚ö†Ô∏è Environment exists but state is: $ENV_STATE"
            echo "üóëÔ∏è Deleting and recreating..."
            az containerapp env delete --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP --yes || true
            sleep 30
            create_environment
          fi
        else
          create_environment
        fi
        
        # Verify environment is ready
        echo "üîç Verifying environment is ready..."
        for i in {1..10}; do
          ENV_STATE=$(az containerapp env show --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP --query properties.provisioningState --output tsv)
          if [ "$ENV_STATE" = "Succeeded" ]; then
            echo "‚úÖ Environment is ready (state: $ENV_STATE)"
            break
          else
            echo "‚è≥ Environment state: $ENV_STATE, waiting... ($i/10)"
            sleep 30
          fi
        done
        
        echo "‚úÖ Azure resources setup completed"
    
    - name: Deploy Container App
      run: |
        # Set variables
        ACR_NAME="${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}"
        ACR_PASSWORD="${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}"
        IMAGE_TAG="${{ github.sha }}"
        IMAGE_NAME="linkedin-mcp-server"
        FULL_IMAGE_NAME="$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG"
        RESOURCE_GROUP="Pollys"
        ENVIRONMENT_NAME="cae-linkedin-mcp"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        
        echo "üöÄ Deploying Container App: $CONTAINER_APP_NAME"
        echo "üì¶ Using image: $FULL_IMAGE_NAME"
        
        # Verify environment is ready before deployment
        ENV_STATE=$(az containerapp env show --name $ENVIRONMENT_NAME --resource-group $RESOURCE_GROUP --query properties.provisioningState --output tsv)
        if [ "$ENV_STATE" != "Succeeded" ]; then
          echo "‚ùå Environment not ready (state: $ENV_STATE)"
          exit 1
        fi
        
        # Deploy container app
        echo "üîê Using ACR admin credentials for authentication"
        
        az containerapp create \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --environment $ENVIRONMENT_NAME \
          --image $FULL_IMAGE_NAME \
          --registry-server $ACR_NAME.azurecr.io \
          --registry-username $ACR_NAME \
          --registry-password "$ACR_PASSWORD" \
          --env-vars \
            LINKEDIN_EMAIL="${{ secrets.LINKEDIN_EMAIL }}" \
            LINKEDIN_PASSWORD="${{ secrets.LINKEDIN_PASSWORD }}" \
            ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
            MCP_SERVER_PORT=8001 \
            DEBUG=false \
            GATSBY_LINKEDIN_USERNAME="${{ secrets.GATSBY_LINKEDIN_USERNAME }}" \
          --target-port 8001 \
          --ingress external \
          --min-replicas 0 \
          --max-replicas 3 \
          --cpu 1.0 \
          --memory 2Gi
        
        echo "‚úÖ Container app deployment initiated"
    
    - name: Wait for Deployment and Verify
      run: |
        # Set variables
        RESOURCE_GROUP="Pollys"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        
        echo "‚è≥ Waiting for deployment to complete..."
        
        # Wait for provisioning to complete
        for i in {1..20}; do
          PROVISIONING_STATE=$(az containerapp show \
            --name $CONTAINER_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --query properties.provisioningState \
            --output tsv)
          
          echo "üìä Provisioning state: $PROVISIONING_STATE ($i/20)"
          
          if [ "$PROVISIONING_STATE" = "Succeeded" ]; then
            echo "‚úÖ Container App provisioned successfully!"
            break
          elif [ "$PROVISIONING_STATE" = "Failed" ]; then
            echo "‚ùå Container App provisioning failed"
            
            # Get detailed error information
            echo "üìã Getting detailed error information..."
            az containerapp show \
              --name $CONTAINER_APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --query properties \
              --output json
            
            exit 1
          else
            echo "‚è≥ Still provisioning... waiting 30 seconds"
            sleep 30
          fi
        done
        
        # Get the container app URL
        APP_URL=$(az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        if [ -n "$APP_URL" ]; then
          echo "‚úÖ Container App deployed successfully!"
          echo "üåê App URL: https://$APP_URL"
          
          # Wait for the app to start
          echo "‚è≥ Waiting for app to start (90 seconds)..."
          sleep 90
          
          # Test health endpoint with retries
          echo "ü©∫ Testing health endpoint..."
          for i in {1..10}; do
            if curl -f -s "https://$APP_URL/health" >/dev/null; then
              echo "‚úÖ Health check passed!"
              
              # Test MCP status
              echo "üîç Testing MCP status..."
              if curl -f -s "https://$APP_URL/api/mcp/status" >/dev/null; then
                echo "‚úÖ MCP status endpoint working!"
              else
                echo "‚ö†Ô∏è MCP status check failed - app may still be initializing"
              fi
              break
            else
              echo "‚è≥ Health check attempt $i/10 - waiting 15 seconds..."
              sleep 15
            fi
          done
          
        else
          echo "‚ùå Failed to get container app URL"
          exit 1
        fi
    
    - name: Display Final Summary
      run: |
        # Set variables
        RESOURCE_GROUP="Pollys"
        CONTAINER_APP_NAME="linkedin-mcp-server"
        ACR_NAME="${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}"
        
        echo ""
        echo "üéâ Final Deployment Summary"
        echo "=========================="
        
        # Get app details
        APP_URL=$(az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        PROVISIONING_STATE=$(az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.provisioningState \
          --output tsv)
        
        RUNNING_STATE=$(az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.runningStatus \
          --output tsv)
        
        echo "üì¶ Container App: $CONTAINER_APP_NAME"
        echo "üè† Resource Group: $RESOURCE_GROUP"
        echo "üê≥ Registry: $ACR_NAME.azurecr.io"
        echo "üìä Provisioning State: $PROVISIONING_STATE"
        echo "üèÉ Running State: $RUNNING_STATE"
        echo "üåê Public URL: https://$APP_URL"
        echo ""
        echo "üîó API Endpoints:"
        echo "  Health: https://$APP_URL/health"
        echo "  MCP Status: https://$APP_URL/api/mcp/status"
        echo "  LinkedIn Summary: https://$APP_URL/api/linkedin/summary"
        echo ""
        echo "üìã For Gatsby Integration:"
        echo "  Add this to your GitHub secrets:"
        echo "  GATSBY_MCP_SERVER_URL=https://$APP_URL"
        echo ""
        
        if [ "$PROVISIONING_STATE" = "Succeeded" ]; then
          echo "üéâ LinkedIn MCP Server deployed successfully!"
          echo "üöÄ Your LinkedIn integration is now live!"
        else
          echo "‚ö†Ô∏è Deployment completed but provisioning state is: $PROVISIONING_STATE"
          echo "   Check the Azure portal for more details."
        fi

